{"version":3,"sources":["App.module.scss","components/legend/legend.module.scss","components/counter/counter.module.scss","components/select/select.module.scss","components/button/button.module.scss","components/visualizer/visualizer.module.scss","components/block/block.module.scss","components/blockRow/blockRow.module.scss","components/link/link.module.scss","components/select/select.jsx","components/button/button.jsx","hooks/useInterval.js","utils/memoryState.js","utils/parseTimelineString.js","components/visualizer/visualizer.jsx","constants/index.js","components/block/block.jsx","components/counter/counter.jsx","components/blockRow/blockRow.jsx","components/legend/legend.jsx","components/link/link.jsx","App.jsx","index.js"],"names":["module","exports","select","options","onChange","hasObjects","className","styles","map","option","key","value","label","Button","onClick","disabled","button","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","MemoryState","initialState","this","state","Array","fill","prototype","toString","join","addProcess","proc","algorithm","slot","slots","getAvailableSlotsForProcess","size","length","Error","sort","a","b","Math","floor","random","addProcessAtIndex","startIndex","hasUncompletedJobs","filter","element","done","duration","incrementProgress","removeCompletedProcesses","slice","processSize","currentSlot","availableSlots","i","push","parseTimelineString","timelineString","setError","split","item","index","processData","forEach","isNaN","Number","err","Visualizer","processes","started","setStarted","error","useState","currentState","setCurrentState","processHistroy","setProcessHistory","stepCount","setStepCount","step","message","concat","visualizer","isIndexRow","values","keys","x","s","isErrorRow","algoOptions","timelineOptions","colors","Block","isInvisible","isIndexBlock","isErrorBlock","classnames","block","style","background","color","Counter","counter","number","BlockRow","blockRow","Legend","legend","legendItem","Link","link","href","App","setAlgorithm","timeline","setTimeline","setProcesses","scheduler","header","title","controls","target","customTimeline","onBlur","e","onKeyPress","algo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e52754a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scheduler\":\"App_scheduler__1vHEb\",\"header\":\"App_header__2L3DO\",\"controls\":\"App_controls__2MSL9\",\"timeline\":\"App_timeline__1jgvV\",\"customTimeline\":\"App_customTimeline__LuqHI\",\"error\":\"App_error__1LS0k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend\":\"legend_legend__28fLd\",\"legendItem\":\"legend_legendItem__2j_9d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__3ZU8z\",\"number\":\"counter_number__QGA_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"select_select__XlnEk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__H5057\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"visualizer\":\"visualizer_visualizer__IqrZE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"block_block__2bW7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockRow\":\"blockRow_blockRow__2nC0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"link_link__24NwO\"};","import React from 'react';\n\nimport styles from './select.module.scss';\n\nconst select = ({ options = [], onChange }) => {\n  const hasObjects = typeof options[0] === 'object';\n\n  return (\n    <select onChange={onChange} className={styles.select}>\n      {options.map(option =>\n        hasObjects ? (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ) : (\n          <option key={option}>{option}</option>\n        )\n      )}\n    </select>\n  );\n};\n\nexport default select;\n","import React from 'react';\n\nimport styles from './button.module.scss';\n\nconst Button = ({ label, onClick, disabled }) => (\n  <button className={styles.button} disabled={disabled} onClick={onClick}>\n    {label}\n  </button>\n);\n\nexport default Button;\n","import { useEffect, useRef } from 'react';\n\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","function MemoryState(initialState = null) {\n  this.state = initialState ? initialState : Array(50).fill(null);\n}\n\nMemoryState.prototype.toString = function() {\n  return this.state.join();\n};\n\nMemoryState.prototype.addProcess = function(proc, algorithm) {\n  const slots = this.getAvailableSlotsForProcess(proc.size);\n\n  if (slots.length === 0) throw new Error('Not enough free memory');\n  let slot;\n\n  switch (algorithm) {\n    case 'LAST':\n      slot = slots[slots.length - 1];\n      break;\n    case 'BEST':\n      slot = slots.sort((a, b) => a.size - b.size)[0];\n      break;\n    case 'WORST':\n      slot = slots.sort((a, b) => b.size - a.size)[0];\n      break;\n    case 'RANDOM':\n      const index = Math.floor(Math.random() * (slots.length - 1));\n      slot = slots[index];\n      break;\n    default:\n      throw new Error('This algorithm is not implemented');\n  }\n\n  this.addProcessAtIndex(proc, slot.startIndex);\n};\n\nMemoryState.prototype.hasUncompletedJobs = function() {\n  return this.state.filter(\n    element => element && element.done + 1 < element.duration\n  ).length;\n};\n\nMemoryState.prototype.incrementProgress = function() {\n  this.state = this.state.map(element =>\n    element\n      ? {\n          ...element,\n          done: element.done + 1\n        }\n      : null\n  );\n};\n\nMemoryState.prototype.removeCompletedProcesses = function() {\n  this.state = this.state.map(element =>\n    element ? (element.done === element.duration ? null : element) : null\n  );\n};\n\nMemoryState.prototype.addProcessAtIndex = function(proc, startIndex) {\n  this.state = [\n    ...this.state.slice(0, startIndex),\n    ...Array(proc.size).fill({\n      ...proc,\n      done: 0\n    }),\n    ...this.state.slice(startIndex + proc.size)\n  ];\n};\n\nMemoryState.prototype.getAvailableSlotsForProcess = function(processSize) {\n  let availableSlots = [];\n  // available slot\n  // {\n  //     startIndex\n  //     size\n  // }\n\n  let currentSlot;\n\n  for (let i = 0; i < this.state.length; i++) {\n    if (this.state[i] === null) {\n      if (currentSlot) {\n        currentSlot.size = currentSlot.size + 1;\n      } else {\n        currentSlot = {\n          startIndex: i,\n          size: 1\n        };\n      }\n      if (\n        i === this.state.length - 1 &&\n        currentSlot &&\n        currentSlot.size >= processSize\n      )\n        availableSlots.push(currentSlot);\n    } else {\n      if (currentSlot) {\n        if (currentSlot.size >= processSize) availableSlots.push(currentSlot);\n        currentSlot = null;\n      } else {\n      }\n    }\n  }\n\n  return availableSlots;\n};\n\nexport default MemoryState;\n","const parseTimelineString = (timelineString, setError) => {\n  try {\n    setError('');\n\n    const processStrings = timelineString.split(';');\n    return processStrings.map((item, index) => {\n      const processData = item.split(',');\n\n      if (processData.length !== 2) throw new Error();\n      processData.forEach(value => {\n        if (value === '' || isNaN(Number(value))) {\n          throw new Error();\n        }\n      });\n\n      return {\n        size: Number(processData[0]),\n        duration: Number(processData[1]),\n        index\n      };\n    });\n  } catch (err) {\n    setError('Invalid timeline!');\n  }\n};\n\nexport default parseTimelineString;\n","import React, { useState, useEffect } from 'react';\n\nimport { useInterval } from '../../hooks';\nimport { MemoryState } from '../../utils';\nimport { BlockRow, Counter } from '..';\n\nimport styles from './visualizer.module.scss';\n\nconst Visualizer = ({\n  processes,\n  algorithm,\n  started,\n  setStarted,\n  setError,\n  error\n}) => {\n  const [currentState, setCurrentState] = useState(new MemoryState());\n  const [processHistroy, setProcessHistory] = useState([]);\n  const [stepCount, setStepCount] = useState(0);\n\n  useInterval(\n    () => {\n      step();\n    },\n    started ? 1000 : null\n  );\n\n  useEffect(() => {\n    if (started) {\n      setCurrentState(new MemoryState());\n      setProcessHistory([]);\n      setStepCount(0);\n      setError('');\n    }\n  }, [setError, started]);\n\n  const step = () => {\n    // increment progress of jobs in memory\n    currentState.incrementProgress();\n\n    // remove completed jobs\n    currentState.removeCompletedProcesses();\n\n    // push new jobs\n    try {\n      if (processes[stepCount])\n        currentState.addProcess(processes[stepCount], algorithm);\n    } catch (err) {\n      setStarted(false);\n      setError(err.message);\n    }\n    // snapshot to history\n    setProcessHistory(processHistroy.concat([currentState.state]));\n\n    // finish if no more jobs\n    if (!processes[stepCount + 1] && !currentState.hasUncompletedJobs())\n      setStarted(false);\n\n    // increment step count\n    setStepCount(stepCount + 1);\n  };\n\n  return (\n    <div className={styles.visualizer}>\n      <BlockRow isIndexRow values={[...Array(50).keys()].map(x => ++x)} />\n      {processHistroy.map((state, index) => (\n        <BlockRow key={index} values={state.map(s => (s ? s.index : null))} />\n      ))}\n      { error === 'Not enough free memory' && (\n        <BlockRow isErrorRow values={Array(50).fill(null)} />\n      )}\n\n      <Counter stepCount={stepCount} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","export const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\nexport const algoOptions = [\n  {\n    label: 'Last-Fit',\n    value: 'LAST'\n  },\n  {\n    label: 'Best-Fit',\n    value: 'BEST'\n  },\n  {\n    label: 'Worst-Fit',\n    value: 'WORST'\n  },\n  {\n    label: 'Random-Fit',\n    value: 'RANDOM'\n  }\n];\n\nexport const timelineOptions = [\n  '4,2;8,3;4,2;16,5;8,2;4,2;8,4;4,3;4,3;32,2;12,1',\n  '1,8;7,4;10,6;25,2;1,4;13,3;6,2;8,1;50,1',\n  '1,8;35,4;3,6;4,2;1,4;3,3;1,2;5,1;50,1',\n  'custom'\n];\n\nexport const colors = [\n  '#e6194b',\n  '#3cb44b',\n  '#ffe119',\n  '#4363d8',\n  '#f58231',\n  '#911eb4',\n  '#46f0f0',\n  '#f032e6',\n  '#bcf60c',\n  '#fabebe',\n  '#008080',\n  '#e6beff',\n  '#9a6324',\n  '#fffac8',\n  '#800000',\n  '#aaffc3',\n  '#808000',\n  '#ffd8b1',\n  '#000075',\n  '#808080'\n];\n","import React from 'react';\nimport classnames from 'classnames';\nimport { colors } from '../../constants';\n\nimport styles from './block.module.scss';\n\nconst Block = ({ isInvisible, value, isIndexBlock, isErrorBlock }) => (\n  <div\n    className={classnames(styles.block)}\n    style={{\n      background: isInvisible || isIndexBlock ? 'transparent' : colors[value],\n      color: isErrorBlock ? 'red' : 'white'\n    }}\n  >\n    { isIndexBlock ? `${value}` : isErrorBlock ? 'x' : null}\n    </div>\n);\n\nexport default Block;\n","import React from 'react';\n\nimport styles from './counter.module.scss';\n\nconst Counter = ({ stepCount }) => (\n  <div className={styles.counter}>\n    <div>\n      tick count: <span className={styles.number}>{stepCount}</span>\n    </div>\n  </div>\n);\n\nexport default Counter;\n","import React from 'react';\n\nimport { Block } from '..';\n\nimport styles from './blockRow.module.scss';\n\nconst BlockRow = ({values, isIndexRow, isErrorRow}) => {\n    return <div className={styles.blockRow}>\n        {values.map((value, index) => <Block isErrorBlock={isErrorRow} key={index} value={value} isIndexBlock={isIndexRow} />)}\n    </div>\n}\n\nexport default BlockRow;","import React from 'react';\n\nimport { Block } from '..';\n\nimport styles from './legend.module.scss';\n\nconst Legend = ({ processes }) =>\n  processes ? (\n    <div className={styles.legend}>\n      <div className={styles.legendItem}>\n        <Block isInvisible />\n        <div>Size</div>\n        <div>Duration</div>\n      </div>\n      {processes.map(proc => (\n        <div key={proc.index} className={styles.legendItem}>\n          <Block value={proc.index} />\n          <div>{proc.size}</div>\n          <div>{proc.duration}</div>\n        </div>\n      ))}\n    </div>\n  ) : null;\n\nexport default Legend;\n","import React from 'react';\n\nimport styles from './link.module.scss';\n\nconst Link = () => (\n  <div className={styles.link}>\n    <a href=\"https://ottmartens.github.io/cpu-algorithms/\">CPU Scheduler</a>\n    <a href=\"https://ottmartens.github.io/disk-algorithms/\">Disk Scheduler</a>\n  </div>\n);\n\nexport default Link;","import React, { useState, useEffect } from 'react';\n\nimport { Select, Button, Visualizer, Legend, Link } from './components';\nimport { timelineOptions, algoOptions } from './constants';\nimport { parseTimelineString } from './utils';\n\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const [algorithm, setAlgorithm] = useState(algoOptions[0].value);\n  const [timeline, setTimeline] = useState(timelineOptions[0]);\n  const [started, setStarted] = useState(false);\n  const [processes, setProcesses] = useState([]);\n\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (timeline !== 'custom') {\n      setProcesses(parseTimelineString(timeline, setError));\n    }\n  }, [timeline]);\n\n  return (\n    <div className={styles.scheduler}>\n      <Link/>\n      <header className={styles.header}>\n        <h1 className={styles.title}>RAM scheduler</h1>\n        <div className={styles.controls}>\n          <div className={styles.timeline}>\n            <h3>Process timeline</h3>\n            <Select\n              options={timelineOptions}\n              onChange={({ target: { value } }) => {\n                setTimeline(value);\n                setStarted(false);\n              }}\n            />\n            {timeline === 'custom' && (\n              <input\n                className={styles.customTimeline}\n                onBlur={e => {\n                  setProcesses(parseTimelineString(e.target.value, setError));\n                }}\n                onKeyPress={e => {\n                  if (e.key === 'Enter') {\n                    setProcesses(parseTimelineString(e.target.value, setError));\n                  }\n                }}\n              />\n            )}\n          </div>\n          <div className={styles.algo}>\n            <h3>Algorithm</h3>\n            <Select\n              options={algoOptions}\n              onChange={({ target: { value } }) => {\n                setAlgorithm(value);\n                setStarted(false);\n              }}\n            />\n          </div>\n        </div>\n        <Button\n          disabled={error === 'Invalid timeline!'}\n          label={started ? 'STOP' : 'START'}\n          onClick={() => {\n            if (started) {\n              setStarted(false);\n            } else {\n              setStarted(true);\n            }\n          }}\n        />\n        {error && <span className={styles.error}>{error}</span>}\n      </header>\n      <Legend processes={processes} />\n      <Visualizer\n        algorithm={algorithm}\n        processes={processes}\n        started={started}\n        setStarted={setStarted}\n        setError={setError}\n        error={error}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}